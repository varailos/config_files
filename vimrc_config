set nocompatible              " be iMproved, required 
filetype off                  " required


" set the runtime path to include Vundle and initialize

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" plugin on Github repo - NERDTREE
Plugin 'scrooloose/nerdtree'

" Syntax correction for programming
Plugin 'vim-syntastic/syntastic'

" Autobrackets ect
Plugin 'Raimondi/delimitMate'

" Completion of text with tab
Plugin 'ervandew/supertab'

" Autocompletion jedi vim python
Plugin 'davidhalter/jedi-vim'

" PLugin for txt file syntax highlighting
Plugin 'vim-scripts/txt.vim'

" Quick thesaurus from thesaurus.com for vim
Plugin 'beloglazov/vim-online-thesaurus'

" Get a powerline displaying path, versions ect on the bottom
Plugin 'powerline/powerline'

" Snipets start
" Track the engine.
"Plugin 'SirVer/ultisnips'

" Get even more great colorschemes
Plugin 'altercation/vim-colors-solarized'

" Get even more more great colorschemes
Plugin 'rafi/awesome-vim-colorschemes'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Fast and Easy Find and Replace across multiple files USE :Grep  :Replace
" :Replace undo
Plugin 'dkprice/vim-easygrep'

" Vim motion on speed!
" map <Leader> <Leader>w
Plugin 'easymotion/vim-easymotion'

" Multiple cursors
Plugin 'terryma/vim-multiple-cursors'

" A light clone of powerline
Plugin 'itchyny/lightline.vim'

" Vim Latex
Plugin 'vim-latex/vim-latex'


" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"Snipets end



" All of your Plugins must be added before the following line

call vundle#end()            " required

filetype plugin indent on    " required

" To ignore plugin indent changes, instead use:
"filetype plugin on

"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins

"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set backspace=2 " make backspace work like most other apps
syntax on
set number
set hlsearch
set encoding=utf-8
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
" Highlight column line 80 for python files
autocmd FileType python setlocal colorcolumn=72,80
" Enable spelling for markdown files
autocmd FileType markdown setlocal spell spelllang=en_gb

" VIM python execuction script
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set visualbell
let mapleader= ","
map ; :
"change key binding for thesaurus word under cursor
let g:online_thesaurus_map_keys = 0
" control + a
nnoremap <C-a> :OnlineThesaurusCurrentWord<CR> 
" open nerd tree with control + n
map <C-n> :NERDTreeToggle<CR> 
" refresh nerdtree
nmap <Leader>r :NERDTreeFocus<cr>R<c-w><c-p> 
" time in milliseconds that vim delays to execute a mapping
"set timeoutlen=0 
let g:netrw_browsex_viewer="setsid xdg-open"
set nospell
colorscheme torte
" VIM PYTHON EXECUTION SCRIPT
nnoremap <silent> <F5> :!python %<CR>
" VIM C EXECUTION SCRIPT
map <F8> :w <CR> :!gcc % -o %< && ./%< <CR>
" Set lightline
set laststatus=2
set noshowmode
" SEt multiple cursors
let g:multi_cursor_use_default_mapping=0
"let g:multi_cursor_Start_word_key = '<C-x>'
" JEDI AUTOINITIALIZATION FLAG
" to open popup press <Ctrl> + <Space>
let g:jedi#popup_on_dot = 0
" Vim Latex compile to pdf with ,ll
let g:Tex_MultipleCompileFormats = 'pdf'
let g:Tex_DefaultTargetFormat = 'pdf'
" stop automatic folding
set nofoldenable 
let Tex_FoldedSections=""
let Tex_FoldedEnvironments=""
let Tex_FoldedMisc=""
" show hidden files with nerdtree
let NERDTreeShowHidden=1

" maximize vim window and choose guifont
if has("gui_running")
  set background=dark
  colorscheme solarized
  " Maximize gvim window.
  set lines=36 columns=146
  " choose guifont depending on OS
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_gtk3")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h18
  elseif has("gui_win31")
    set guifont=Consolas:h14:cANSI
  endif
  " GUI is running or is about to start.
else
  " This is console Vim.
  if exists("+lines")
    set lines=36 " 36
  endif
  if exists("+columns")
    set columns=146 " 176
  endif
endif
